-> https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/

*) Nginx configuration Files reading
    -> Nginx configuration files is noting else, but a set of directive and command defined to fulfill a particular context
    -> Nginx contexts types are main, event, http, server, mail, stream etc...
    -> Nginx contexts are usually named before curly bracket block and inside curly required command and directives to fulfill respective context or sections required configurations
    -> Whole body of configuration is usually refereed as a main context.

*) Feature Specific Configuration File:
    -> https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/#feature-specific-configuration-files
    -> To make the configuration easier to maintain, we recommend that you split it into a set of feature‑specific files stored in the /etc/nginx/conf.d directory and use the include directive in the main nginx.conf file to reference the contents of the feature‑specific files.

*) Context:
    -> A few top‑level directives, referred to as contexts, group together the directives that apply to different traffic types:
        -> events – General connection processing
        -> http – HTTP traffic
        -> mail – Mail traffic
        -> stream – TCP and UDP traffic
    -> Directives placed outside of these contexts are said to be in the main context.

*) Command:
    -> :q (to quit vim in linux)
    -> :q!
    -> ps aux | grep -i nginx (to find information about running processes)
    -> systemctl restart nginx

*) to read the configuration file on yam based installation
    -> cd /etc/nginx
    -> vim nginx.conf
        -> user <with which user we want to run our os processes>; (we can define number of worker processes here)

        -> worker _processes <number of worker processes>;

        -> error_log <what ever error nginx find that will go to this directory> warn (warn is the log level);

        -> pid (process name) <nginx store process id under this directory because when we stop the process then os will finds out the process id number to kill it> (cat /var/run/nginx.pid) (we will get the master process pid because when we will kill the process all the worker process also get kill)

        -> events{
            worker_connections <max_request_it_will_accept>
        }

        -> http{
            include /etc/nginx/mime.types; (inside the 'mime.type' all of the files that are supported is defined)

            default_type application/octet-stream; ()

            log_format main (whatever log will generate that will have given formate parameter, This would be the log formate for 'access_log' not 'error log')
            
            access_log /var/log/nginx/access.log main(access log follow 'main' format);

            sendfile on; (if we want to send some file then that is on)
            tcp_nopush on;

            keepalive_timeout 65;(if user is connected to our session then session will not timeout for atleast 65 sec)

            include /etc/nginx/conf.d/*.conf; (whatever conf file located on 'conf.d' that will be a part of http)
        }

*) virtual Servers:
    -> https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/#virtual-servers
    user nobody; # a directive in the 'main' context

        events {
            # configuration of connection processing
        }

        http {
            # Configuration specific to HTTP and affecting all virtual servers  

            server {
                # configuration of HTTP virtual server 1       
                location /one {
                    # configuration for processing URIs starting with '/one'
                }
                location /two {
                    # configuration for processing URIs starting with '/two'
                }
            } 
            
            server {
                # configuration of HTTP virtual server 2
            }
        }

        stream {
            # Configuration specific to TCP/UDP and affecting all virtual servers
            server {
                # configuration of TCP virtual server 1 
            }
        }

*) Inheritance:
    -> https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/#inheritance